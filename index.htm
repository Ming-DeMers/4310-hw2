<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Super Bowl Stats</title>
    <script src="https://d3js.org/d3.v6.min.js"></script>
    <link rel="stylesheet" type="text/css" href="css/styles.css">
</head>

<body>
    <h1>☆★☆★☆★☆★☆★🏈 Super Bowl Statistics 🏈★☆★☆★☆★☆★☆</h1>
    <div class="chart-container" id="attendance-views">
    </div>
    <div class="chart-container" id="ticket-cost">
    </div>
    <div class="chart-container" id="ad-cost">
    </div>
    <script>
        const formatComma = d3.format(",");

        const margin = { top: 50, right: 50, bottom: 50, left: 80 },
            width = 1000 - margin.left - margin.right,
            height = 600 - margin.top - margin.bottom;

        const svg = d3.select("#attendance-views")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .style("background", "white")
            .append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);

        d3.csv("data/INFO 4310 - Superbowl Dataset - ThrowbackDataThursday 2019 Week 5 - Super Bowl.csv").then(data => {
            data.forEach(d => {
                d.Attendance = +d.Attendance;
                d.viewers = +d["Average U.S. Viewers"];
                d.ticketCost = +d["Avg cost of tickets (adj for inflation)"];
                d.medianIncome = +d["Avg Median Income (all races)"];
                d.ticketCostPercentage = (d.ticketCost / d.medianIncome) * 100;
                d.adCost = +d["Cost Per 30s Ad"];
            });

            console.log(data);

            const viewsExtent = d3.extent(data, d => d.viewers);
            const attendanceExtent = d3.extent(data, d => d.Attendance);

            console.log(viewsExtent);
            console.log(attendanceExtent);

            const xScale = d3.scaleBand()
                .domain(data.map(d => d.Game))
                .range([0, width])
                .padding(0.2);

            const yScaleAttendance = d3.scaleLinear()
                .domain(attendanceExtent)
                .nice()
                .range([height, 0]);

            const yScaleViewers = d3.scaleLinear()
                .domain(viewsExtent)
                .nice()
                .range([height, 0]);

            svg.append("g")
                .attr("transform", `translate(0,${height})`)
                .call(d3.axisBottom(xScale))
                .selectAll("text")
                .style("font-size", "12px")
                .style("fill", "black");

            svg.append("g")
                .call(d3.axisRight(yScaleAttendance))
                .attr("transform", `translate(${width - 10},0)`)

                .selectAll("text")
                .style("font-size", "12px")
                .style("fill", "black");

            svg.append("g")
                .call(d3.axisLeft(yScaleViewers))
                .selectAll("text")
                .style("font-size", "12px")
                .style("fill", "black");

            const lineAttendance = d3.line()
                .x(d => xScale(d.Game) + xScale.bandwidth() / 2)
                .y(d => yScaleAttendance(d.Attendance));

            const lineViewers = d3.line()
                .x(d => xScale(d.Game) + xScale.bandwidth() / 2)
                .y(d => yScaleViewers(d.viewers));

            // add lines
            svg.append("path")
                .datum(data)
                .attr("fill", "none")
                .attr("stroke", "blue")
                .attr("stroke-width", 2)
                .attr("opacity", 0.5)
                .attr("d", lineAttendance);

            svg.append("path")
                .datum(data)
                .attr("fill", "none")
                .attr("stroke", "red")
                .attr("stroke-width", 2)
                .attr("opacity", 0.5)
                .attr("d", lineViewers);

            svg.selectAll(".dotViewers")
                .data(data)
                .join("circle")
                .attr("class", "dotViewers")
                .attr("cx", d => xScale(d.Game) + xScale.bandwidth() / 2)
                .attr("cy", d => yScaleViewers(d.viewers))
                .attr("r", 4)
                .attr("fill", "red")
                .attr("opacity", 0.75)
                .on("mouseover", function (event, d) {
                    tooltip.style("visibility", "visible")
                        .html(`Super Bowl ${d.Game}
                        <br>Winner: ${d["Winning team"]}
                        <br> Viewers: ${formatComma(d.viewers)}`)
                        .style("left", `${event.pageX + 10}px`)
                        .style("top", `${event.pageY}px`);
                })
                .on("mousemove", function (event) {
                    tooltip.style("left", `${event.pageX + 10}px`)
                        .style("top", `${event.pageY}px`);
                })
                .on("mouseout", function () {
                    tooltip.style("visibility", "hidden");
                });

            svg.selectAll(".dotAttendance")
                .data(data)
                .join("circle")
                .attr("class", "dotAttendance")
                .attr("cx", d => xScale(d.Game) + xScale.bandwidth() / 2)
                .attr("cy", d => yScaleAttendance(d.Attendance))
                .attr("r", 4)
                .attr("opacity", 0.75)
                .attr("fill", "blue")
                .on("mouseover", function (event, d) {
                    tooltip.style("visibility", "visible")
                        .html(`Super Bowl ${d.Game}
                        <br>Winner: ${d["Winning team"]}
                        <br>Attendees: ${formatComma(d.Attendance)}`)
                        .style("left", `${event.pageX + 10}px`)
                        .style("top", `${event.pageY}px`);
                })
                .on("mousemove", function (event) {
                    tooltip.style("left", `${event.pageX + 10}px`)
                        .style("top", `${event.pageY}px`);
                })
                .on("mouseout", function () {
                    tooltip.style("visibility", "hidden");
                });

            svg.append("text")
                .attr("x", 100)
                .attr("y", 0)
                .text("In-Person Attendance vs Average U.S. Viewers")
                .style("font-size", "24px");

            const legend = svg.append("g")
                .attr("transform", `translate(${width / 3}, 20)`);

            legend.append("line")
                .attr("x1", 0)
                .attr("y1", 0)
                .attr("x2", 20)
                .attr("y2", 0)
                .attr("stroke", "blue")
                .attr("stroke-width", 2);

            legend.append("text")
                .attr("x", 30)
                .attr("y", 5)
                .text("In-Person Attendance")
                .style("font-size", "12px");

            legend.append("line")
                .attr("x1", 0)
                .attr("y1", 20)
                .attr("x2", 20)
                .attr("y2", 20)
                .attr("stroke", "red")
                .attr("stroke-width", 2);

            legend.append("text")
                .attr("x", 30)
                .attr("y", 25)
                .text("U.S. Viewers")
                .style("font-size", "12px");

            const tooltip = d3.select("body")
                .append("div")
                .style("position", "absolute")
                .style("background", "black")
                .style("padding", "5px")
                .style("border-radius", "5px")
                .style("visibility", "hidden");


            // Second chart for ticket cost as percentage of median income
            const svg2 = d3.select("#ticket-cost")
                .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .style("background", "white")
                .append("g")
                .attr("transform", `translate(${margin.left},${margin.top})`);

            const ticketCostPercentageExtent = d3.extent(data, d => d.ticketCostPercentage);

            const yScaleTicketCostPercentage = d3.scaleLinear()
                .domain(ticketCostPercentageExtent)
                .nice()
                .range([height, 0]);

            svg2.append("g")
                .attr("transform", `translate(0,${height})`)
                .call(d3.axisBottom(xScale))
                .selectAll("text")
                .style("font-size", "12px")
                .style("fill", "black");

            svg2.append("g")
                .call(d3.axisLeft(yScaleTicketCostPercentage))
                .selectAll("text")
                .style("font-size", "12px")
                .style("fill", "black");

            const lineTicketCostPercentage = d3.line()
                .x(d => xScale(d.Game) + xScale.bandwidth() / 2)
                .y(d => yScaleTicketCostPercentage(d.ticketCostPercentage));

            svg2.append("path")
                .datum(data)
                .attr("fill", "none")
                .attr("stroke", "green")
                .attr("stroke-width", 2)
                .attr("d", lineTicketCostPercentage);

            svg2.selectAll(".dotTicketCostPercentage")
                .data(data)
                .join("circle")
                .attr("class", "dotTicketCostPercentage")
                .attr("cx", d => xScale(d.Game) + xScale.bandwidth() / 2)
                .attr("cy", d => yScaleTicketCostPercentage(d.ticketCostPercentage))
                .attr("r", 4)
                .attr("fill", "green")
                .on("mouseover", function (event, d) {
                    tooltip.style("visibility", "visible")
                        .html(`Super Bowl ${d.Game}
                        <br>Winner: ${d["Winning team"]}
                        <br>Ticket Cost: $${formatComma(d.ticketCost.toFixed(2))}
                        <br>Median Income: $${formatComma(d.medianIncome.toFixed(2))}
                        <br>Cost as % Income: ${d.ticketCostPercentage.toFixed(2)}%`)
                        .style("left", `${event.pageX + 10}px`)
                        .style("top", `${event.pageY}px`);
                })
                .on("mousemove", function (event) {
                    tooltip.style("left", `${event.pageX + 10}px`)
                        .style("top", `${event.pageY}px`);
                })
                .on("mouseout", function () {
                    tooltip.style("visibility", "hidden");
                });

            svg2.append("text")
                .attr("x", 100)
                .attr("y", 0)
                .text("Ticket Cost as % of Median Income")
                .style("font-size", "24px");

            const legend2 = svg2.append("g")
                .attr("transform", `translate(${width / 3}, 20)`);

            legend2.append("line")
                .attr("x1", 0)
                .attr("y1", 0)
                .attr("x2", 20)
                .attr("y2", 0)
                .attr("stroke", "green")
                .attr("stroke-width", 2);

            legend2.append("text")
                .attr("x", 30)
                .attr("y", 5)
                .text("Ticket Cost as % of Median Income")
                .style("font-size", "12px");

            // Third chart for ad cost
            const svg3 = d3.select("#ad-cost")
                .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .style("background", "white")
                .append("g")
                .attr("transform", `translate(${margin.left},${margin.top})`);

            const adCostExtent = d3.extent(data, d => d.adCost);

            const yScaleAdCost = d3.scaleLinear()
                .domain(adCostExtent)
                .nice()
                .range([height, 0]);

            svg3.append("g")
                .attr("transform", `translate(0,${height})`)
                .call(d3.axisBottom(xScale))
                .selectAll("text")
                .style("font-size", "12px")
                .style("fill", "black");

            svg3.append("g")
                .call(d3.axisLeft(yScaleAdCost))
                .selectAll("text")
                .style("font-size", "12px")
                .style("fill", "black");

            const lineAdCost = d3.line()
                .x(d => xScale(d.Game) + xScale.bandwidth() / 2)
                .y(d => yScaleAdCost(d.adCost));

            svg3.append("path")
                .datum(data)
                .attr("fill", "none")
                .attr("stroke", "purple")
                .attr("stroke-width", 2)
                .attr("d", lineAdCost);

            svg3.selectAll(".dotAdCost")
                .data(data)
                .join("circle")
                .attr("class", "dotAdCost")
                .attr("cx", d => xScale(d.Game) + xScale.bandwidth() / 2)
                .attr("cy", d => yScaleAdCost(d.adCost))
                .attr("r", 4)
                .attr("fill", "purple")
                .on("mouseover", function (event, d) {
                    tooltip.style("visibility", "visible")
                        .html(`Super Bowl ${d.Game}
                        <br>Winner: ${d["Winning team"]}
                        <br>Ad Cost: $${formatComma(d.adCost.toFixed(2))}`)
                        .style("left", `${event.pageX + 10}px`)
                        .style("top", `${event.pageY}px`);
                })
                .on("mousemove", function (event) {
                    tooltip.style("left", `${event.pageX + 10}px`)
                        .style("top", `${event.pageY}px`);
                })
                .on("mouseout", function () {
                    tooltip.style("visibility", "hidden");
                });

            svg3.append("text")
                .attr("x", 100)
                .attr("y", 0)
                .text("Cost of a 30 Second Ad Over Time")
                .style("font-size", "24px");

            const legend3 = svg3.append("g")
                .attr("transform", `translate(${width / 3}, 20)`);

            legend3.append("line")
                .attr("x1", 0)
                .attr("y1", 0)
                .attr("x2", 20)
                .attr("y2", 0)
                .attr("stroke", "purple")
                .attr("stroke-width", 2);

            legend3.append("text")
                .attr("x", 30)
                .attr("y", 5)
                .text("Ad Cost")
                .style("font-size", "12px");
        });
    </script>

</body>

</html>